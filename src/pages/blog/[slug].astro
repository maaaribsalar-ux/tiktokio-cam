---
import { getCollection } from "astro:content";
import Container from "@components/container.astro";
import Layout from "@layouts/Layout.astro";
import { getArticleReadingTime } from "@utils/blog";

import { getLangFromUrl, useTranslations } from "../../i18n/utils";
import { getRelativeLocaleUrl } from "astro:i18n";
import { Icon } from "astro-icon/components";

// Generate a new path for every collection post
export async function getStaticPaths() {
	try {
		console.log("Starting getStaticPaths for blog slugs...");
		
		const blogEntries = await getCollection("blog", ({ data }) => {
			const isNotDraft = !data.draft;
			const hasValidDate = data.publishDate instanceof Date;
			const isPublished = data.publishDate <= new Date();
			
			return isNotDraft && hasValidDate && isPublished;
		});
		
		console.log(`Found ${blogEntries.length} total blog entries`);


		// Filter for English blog posts and process slugs
		const localizedBlogEntries = blogEntries
			.filter((entry) => {
				const hasSlug = entry.slug && entry.slug.startsWith("en/");
				console.log("Checking entry:", {
					slug: entry.slug,
					title: entry.data.title,
					hasSlug
				});
				return hasSlug;
			})
			.map((post) => {
				// Remove the "en/" prefix from the slug
				const cleanSlug = post.slug.substring(3);
				
				console.log("Creating route:", {
					originalSlug: post.slug,
					cleanSlug,
					title: post.data.title
				});
				
				return {
					params: { slug: cleanSlug },
					props: { post: post },
				};
			});
		
		console.log(`Generated ${localizedBlogEntries.length} slug routes`);
		
		return localizedBlogEntries;
	} catch (error) {
		console.error("Error in getStaticPaths for [slug].astro:", error);
		return [];
	}
}

// Get the post directly from the prop on render
const { post } = Astro.props;

if (!post) {
	console.error("Post not found in props:", Astro.props);
	throw new Error("Post not found");
}

console.log("Rendering post:", post.data.title);

const { data, render } = post;
const { Content } = await render();
const readTime = getArticleReadingTime(post.body);

// Get current language and create translation function
const safeUrl = Astro.url || new URL('/', Astro.site || 'http://localhost:4321');
const lang = getLangFromUrl(safeUrl);
const t = useTranslations(lang);

// Helper function to create localized paths
function localizePath(path: string) {
	if (!path || (path && path.startsWith('http')) || path === '#') return path;
	return getRelativeLocaleUrl(lang, path);
}

// Generate proper URLs
const categoryUrl = localizePath(`/blog/category/${post.data.category?.toLowerCase()}`);
const blogUrl = localizePath("/blog");
---

<Layout title={post.data.title} lang={lang}>
	<Container>
		<div class="mx-auto prose prose-lg dark:prose-invert mt-14">
			<a
				href={categoryUrl}
				class="text-blue-400 dark:text-stone-400 uppercase tracking-wider text-sm font-medium no-underline hover:underline">
				{post.data.category}
			</a>
			<h1 class="text-4xl mb-3 lg:text-5xl font-bold lg:tracking-tight mt-1 lg:leading-tight dark:text-white">
				{post.data.title}
			</h1>
			<div class="flex gap-2 items-center">
				<div class="w-full md:w-auto flex flex-wrap gap-3">
					{
						post.data.tags && post.data.tags.map((tag) => (
							<a href={localizePath(`/blog/tag/${tag?.toLowerCase()}`)} class="text-sm text-gray-500 dark:text-stone-300 hover:underline">
								#{tag}
							</a>
						))
					}
				</div>
			</div>
			<div class="flex gap-2 mt-4 items-center flex-wrap md:flex-nowrap">
				<span class="text-gray-400 dark:text-stone-400">
					{post.data.author}
				</span>
				<span class="text-gray-400 dark:text-stone-400">•</span>
				<span class="text-gray-400 dark:text-stone-400">
					{readTime} min
				</span>
				<span class="text-gray-400 dark:text-stone-400">•</span>
				<time class="text-gray-400 dark:text-stone-400" datetime={post.data.publishDate.toISOString()}>
					{post.data.publishDate.toDateString()}
				</time>
			</div>
		</div>

		<div class="mx-auto prose prose-lg dark:prose-invert mt-6 dark:text-gray-200">
			<Content />
		</div>
		<div class="mx-auto mt-20">
			<a href={blogUrl} class="inline-flex items-center text-blue-600 dark:text-blue-400 hover:underline">
				<Icon name="fluent:arrow-left-24-filled" class="w-6 h-6 mr-2" />
				<span>Back to blog</span>
			</a>
		</div>
		<div
			class="mx-auto prose prose-lg dark:prose-invert mt-20"
			x-data="{
				initGiscus: function() {
					let script = document.createElement('script');
					script.src = 'https://giscus.app/client.js';
					script.dataset.repo = 'zankhq/astros';
					script.dataset.repoId = 'R_kgDOGa6DOg';
					script.dataset.category = 'Blog';
					script.dataset.categoryId = 'DIC_kwDOGa6DOs4CXazF';
					script.dataset.mapping = 'pathname';
					script.dataset.strict = '0';
					script.dataset.reactionsEnabled = '1';
					script.dataset.emitMetadata = '0';
					script.dataset.inputPosition = 'top';
					script.dataset.theme = localStorage.theme == 'dark' ? 'dark' : localStorage.theme == 'light' ? 'light' : 'preferred_color_scheme';
					script.dataset.lang = 'en';
					script.dataset.loading = 'lazy';
					script.crossOrigin = 'anonymous';
					script.async = true;
					this.$el.appendChild(script);
				}
			}"
			x-init="initGiscus()">
		</div>
	</Container>
</Layout>
